// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String
  password              String
  credits               Int       @default(100)
  plan                  String    @default("starter") // starter, pro, business
  subscriptionStatus    String?   // active, cancelled, expired
  subscriptionId        String?   // Stripe subscription ID
  paymentMethodId       String?   // Stripe payment method ID
  billingCycle          String?   // monthly, yearly
  nextBillingDate       DateTime?
  pendingPlan           String?   // For checkout process
  pendingBillingCycle   String?   // For checkout process
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastLoginAt           DateTime?
  
  // Relations
  projects              Project[]
  analytics             Analytics[]
  
  @@map("users")
}

model Project {
  id                    String    @id @default(cuid())
  title                 String
  description           String?
  sourceUrl             String?   // YouTube URL or file path
  sourceType            String?   // URL, FILE
  fileName              String?   // Original filename if uploaded
  fileSize              Int?      // File size in bytes
  mimeType              String?   // File MIME type
  duration              String?   // Video duration
  thumbnail             String?   // Thumbnail URL
  status                ProjectStatus @default(PROCESSING)
  
  // Processing metadata
  processingStartedAt   DateTime?
  processingCompletedAt DateTime?
  processingError       String?
  
  // Analytics
  totalViews            Int       @default(0)
  totalLikes            Int       @default(0)
  totalShares           Int       @default(0)
  totalComments         Int       @default(0)
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Relations
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  clips                 Clip[]
  
  @@map("projects")
}

model Clip {
  id                    String    @id @default(cuid())
  title                 String
  description           String?
  startTime             String    // Start time in video (e.g., "12:34")
  endTime               String    // End time in video (e.g., "13:19")
  duration              String    // Clip duration (e.g., "0:45")
  score                 Int       // Viral potential score (0-100)
  reasoning             String?   // AI reasoning for the score
  
  // Content metadata
  transcript            String?   // Clip transcript
  keywords              String[]  // Extracted keywords
  sentiment             String?   // positive, negative, neutral
  category              String?   // educational, entertainment, etc.
  
  // Platform optimization
  platform              String?   // tiktok, instagram, youtube, twitter
  aspectRatio           String?   // 9:16, 1:1, 16:9
  hasSubtitles          Boolean   @default(false)
  hasBranding           Boolean   @default(false)
  
  // File information
  fileUrl               String?   // Generated clip file URL
  thumbnailUrl          String?   // Clip thumbnail URL
  fileSize              Int?      // Generated file size
  
  // Performance metrics
  views                 Int       @default(0)
  likes                 Int       @default(0)
  shares                Int       @default(0)
  comments              Int       @default(0)
  engagementRate        Float?    // Calculated engagement rate
  
  // Status
  status                ClipStatus @default(GENERATED)
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  publishedAt           DateTime?
  
  // Relations
  projectId             String
  project               Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("clips")
}

model Analytics {
  id                    String    @id @default(cuid())
  event                 String    // Event name (e.g., "video_uploaded", "clip_generated")
  properties            String    // JSON string of event properties
  timestamp             DateTime  @default(now())
  
  // User context
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session context
  sessionId             String?
  userAgent             String?
  ipAddress             String?
  
  @@map("analytics")
}

// Enums
enum ProjectStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ClipStatus {
  GENERATED
  PROCESSING
  READY
  PUBLISHED
  FAILED
}
