# ReelRemix Deployment Configuration

# Application Configuration
app:
  name: reelremix
  version: "1.0.0"
  environment: production
  domain: reelremix.com
  
# Infrastructure Configuration
infrastructure:
  provider: aws
  region: us-east-1
  availability_zones:
    - us-east-1a
    - us-east-1b
    - us-east-1c

# Frontend Deployment
frontend:
  type: static
  provider: vercel
  build_command: "npm run build"
  output_directory: "dist"
  node_version: "18.x"
  environment_variables:
    VITE_API_URL: "https://api.reelremix.com"
    VITE_STRIPE_PUBLISHABLE_KEY: "${STRIPE_PUBLISHABLE_KEY}"
    VITE_GOOGLE_ANALYTICS_ID: "${GOOGLE_ANALYTICS_ID}"
  
  # Performance optimizations
  optimizations:
    compression: true
    minification: true
    image_optimization: true
    edge_caching: true
  
  # Security headers
  headers:
    - key: "X-Frame-Options"
      value: "DENY"
    - key: "X-Content-Type-Options"
      value: "nosniff"
    - key: "Referrer-Policy"
      value: "strict-origin-when-cross-origin"
    - key: "Permissions-Policy"
      value: "camera=(), microphone=(), geolocation=()"

# Backend API Deployment
backend:
  type: containerized
  provider: aws_ecs
  cluster: reelremix-cluster
  service: reelremix-api
  
  # Container configuration
  container:
    image: reelremix/api:latest
    cpu: 512
    memory: 1024
    port: 3001
    health_check:
      path: "/health"
      interval: 30
      timeout: 5
      retries: 3
  
  # Auto-scaling configuration
  auto_scaling:
    min_capacity: 2
    max_capacity: 10
    target_cpu: 70
    target_memory: 80
  
  # Load balancer
  load_balancer:
    type: application
    scheme: internet-facing
    ssl_certificate: "${SSL_CERTIFICATE_ARN}"
    health_check:
      path: "/health"
      matcher: "200"

# Worker Service Deployment
worker:
  type: containerized
  provider: aws_ecs
  cluster: reelremix-cluster
  service: reelremix-worker
  
  # Container configuration
  container:
    image: reelremix/worker:latest
    cpu: 1024
    memory: 2048
    
  # Auto-scaling configuration
  auto_scaling:
    min_capacity: 1
    max_capacity: 5
    target_cpu: 80
    target_memory: 85

# AI Service Deployment
ai_service:
  type: containerized
  provider: aws_ecs
  cluster: reelremix-ai-cluster
  service: reelremix-ai
  
  # Container configuration
  container:
    image: reelremix/ai:latest
    cpu: 2048
    memory: 4096
    gpu: true
    
  # Auto-scaling configuration
  auto_scaling:
    min_capacity: 1
    max_capacity: 3
    target_cpu: 85
    target_memory: 90

# Database Configuration
database:
  type: postgresql
  provider: aws_rds
  instance_class: db.t3.medium
  engine_version: "14.9"
  allocated_storage: 100
  max_allocated_storage: 1000
  multi_az: true
  backup_retention: 7
  backup_window: "03:00-04:00"
  maintenance_window: "sun:04:00-sun:05:00"
  
  # Security
  encryption: true
  deletion_protection: true
  
  # Performance
  performance_insights: true
  monitoring_interval: 60

# Redis Configuration
redis:
  type: elasticache
  provider: aws
  node_type: cache.t3.micro
  num_cache_nodes: 1
  engine_version: "7.0"
  
  # Security
  auth_token: "${REDIS_AUTH_TOKEN}"
  encryption_in_transit: true
  encryption_at_rest: true

# Storage Configuration
storage:
  type: object_storage
  provider: aws_s3
  buckets:
    - name: reelremix-uploads
      versioning: true
      encryption: true
      lifecycle:
        - transition_to_ia: 30
        - transition_to_glacier: 90
        - expiration: 365
    - name: reelremix-processed
      versioning: true
      encryption: true
      cdn: true

# CDN Configuration
cdn:
  provider: cloudflare
  zones:
    - reelremix.com
    - api.reelremix.com
    - assets.reelremix.com
  
  # Caching rules
  caching:
    static_assets: "1y"
    api_responses: "5m"
    images: "1M"
    videos: "1w"
  
  # Security
  ssl: "strict"
  security_level: "medium"
  bot_fight_mode: true

# Monitoring Configuration
monitoring:
  # Application monitoring
  apm:
    provider: datadog
    service_name: reelremix
    environment: production
    
  # Infrastructure monitoring
  infrastructure:
    provider: aws_cloudwatch
    metrics:
      - cpu_utilization
      - memory_utilization
      - disk_utilization
      - network_in
      - network_out
      - request_count
      - response_time
      - error_rate
  
  # Log aggregation
  logging:
    provider: aws_cloudwatch_logs
    retention: 30
    
  # Alerting
  alerts:
    - name: "High Error Rate"
      condition: "error_rate > 5%"
      notification: "slack"
    - name: "High Response Time"
      condition: "response_time > 2s"
      notification: "email"
    - name: "Low Disk Space"
      condition: "disk_usage > 85%"
      notification: "pagerduty"

# Security Configuration
security:
  # WAF (Web Application Firewall)
  waf:
    provider: aws_waf
    rules:
      - sql_injection_protection
      - xss_protection
      - rate_limiting
      - geo_blocking
  
  # Secrets management
  secrets:
    provider: aws_secrets_manager
    secrets:
      - database_password
      - jwt_secret
      - stripe_secret_key
      - openai_api_key
  
  # VPC configuration
  vpc:
    cidr: "10.0.0.0/16"
    public_subnets:
      - "10.0.1.0/24"
      - "10.0.2.0/24"
    private_subnets:
      - "10.0.10.0/24"
      - "10.0.20.0/24"
    
  # Security groups
  security_groups:
    - name: "web"
      ingress:
        - port: 80
          protocol: "tcp"
          source: "0.0.0.0/0"
        - port: 443
          protocol: "tcp"
          source: "0.0.0.0/0"
    - name: "api"
      ingress:
        - port: 3001
          protocol: "tcp"
          source: "web"
    - name: "database"
      ingress:
        - port: 5432
          protocol: "tcp"
          source: "api"

# CI/CD Configuration
cicd:
  provider: github_actions
  
  # Build pipeline
  build:
    triggers:
      - push_to_main
      - pull_request
    steps:
      - checkout
      - setup_node
      - install_dependencies
      - run_tests
      - build_application
      - security_scan
      - build_docker_image
      - push_to_registry
  
  # Deployment pipeline
  deploy:
    environments:
      staging:
        trigger: push_to_develop
        approval: false
      production:
        trigger: push_to_main
        approval: true
    
    steps:
      - deploy_database_migrations
      - deploy_backend_services
      - deploy_worker_services
      - deploy_ai_services
      - deploy_frontend
      - run_smoke_tests
      - notify_team

# Backup and Disaster Recovery
backup:
  # Database backups
  database:
    automated: true
    retention: 30
    cross_region: true
    
  # File storage backups
  storage:
    versioning: true
    cross_region_replication: true
    
  # Application backups
  application:
    configuration: true
    secrets: true
    
# Disaster recovery
disaster_recovery:
  rto: "4h"  # Recovery Time Objective
  rpo: "1h"  # Recovery Point Objective
  
  # Multi-region setup
  regions:
    primary: "us-east-1"
    secondary: "us-west-2"
  
  # Failover strategy
  failover:
    automatic: false
    manual: true
    testing_schedule: "quarterly"

# Environment Variables
environment_variables:
  # Database
  DATABASE_URL: "${DATABASE_URL}"
  
  # Redis
  REDIS_URL: "${REDIS_URL}"
  
  # Authentication
  JWT_SECRET: "${JWT_SECRET}"
  JWT_EXPIRES_IN: "1h"
  
  # Payment
  STRIPE_SECRET_KEY: "${STRIPE_SECRET_KEY}"
  STRIPE_WEBHOOK_SECRET: "${STRIPE_WEBHOOK_SECRET}"
  
  # AI Services
  OPENAI_API_KEY: "${OPENAI_API_KEY}"
  
  # Storage
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  AWS_REGION: "us-east-1"
  S3_BUCKET: "reelremix-uploads"
  
  # Monitoring
  DATADOG_API_KEY: "${DATADOG_API_KEY}"
  SENTRY_DSN: "${SENTRY_DSN}"
  
  # Email
  SENDGRID_API_KEY: "${SENDGRID_API_KEY}"
  
  # Application
  NODE_ENV: "production"
  PORT: "3001"
  FRONTEND_URL: "https://reelremix.com"
  API_URL: "https://api.reelremix.com"

# Health Checks
health_checks:
  # Frontend
  frontend:
    url: "https://reelremix.com"
    expected_status: 200
    timeout: 10
    
  # API
  api:
    url: "https://api.reelremix.com/health"
    expected_status: 200
    timeout: 5
    
  # Database
  database:
    type: "postgresql"
    query: "SELECT 1"
    timeout: 5
    
  # Redis
  redis:
    type: "redis"
    command: "PING"
    timeout: 5

# Performance Targets
performance_targets:
  # Frontend
  frontend:
    first_contentful_paint: "1.5s"
    largest_contentful_paint: "2.5s"
    cumulative_layout_shift: 0.1
    
  # API
  api:
    response_time_p95: "500ms"
    response_time_p99: "1s"
    availability: "99.9%"
    
  # Processing
  processing:
    video_processing_time: "2x video length"
    queue_processing_time: "< 5 minutes"
